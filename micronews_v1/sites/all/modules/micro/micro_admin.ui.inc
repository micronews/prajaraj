<?php

/**
 * @file
 * Micro type editing UI.
 */

/**
 * Displays the micro type admin overview page.
 */
function micro_overview_types() {
  $types = micro_type_get_types();
  $names = micro_type_get_names();
  $field_ui = module_exists('field_ui');
  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => $field_ui ? '4' : '2'));
  $rows = array();
  $module_data = system_rebuild_module_data();

  foreach ($names as $key => $name) {
    $type = $types[$key];
    $type_url_str = str_replace('_', '-', $type->machine_name);
    $row = array(theme('micro_admin_overview', array('name' => $name, 'machine_name' => $type)));
    // If the micro type is provided by a Feature, it will probably use the default
    // edit/manage/delete forms so won't necessarily have it's own hook_micro_form() implementation.
    if (micro_hook($type->machine_name, 'form') || array_key_exists('features', $module_data[$type->module]->info)) {
      // Set the edit column.
      $row[] = array('data' => l(t('edit'), 'admin/structure/micro/manage/' . $type_url_str));

      if ($field_ui) {
        // Manage fields.
        $row[] = array('data' => l(t('manage fields'), 'admin/structure/micro/manage/' . $type_url_str . '/fields'));

        // Display fields.
        $row[] = array('data' => l(t('manage display'), 'admin/structure/micro/manage/' . $type_url_str . '/display'));
      }

      // Set the delete column.
      if (($type->module == 'micro')  || array_key_exists('features', $module_data[$type->module]->info)) {
        $row[] = array('data' => l(t('delete'), 'admin/structure/micro/manage/' . $type_url_str . '/delete'));
      }
      else {
        $row[] = array('data' => '');
      }

    }
    else {
      // For those micro types managed elsewhere
      for ($i=0; $i<4; $i++) {
        $row[] = array('data' => '');
      }
    }
    $rows[] = $row;
  }

  $build['micro_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No micro types available. <a href="@link">Add micro type</a>.', array('@link' => url('admin/structure/micro/add'))),
  );

  return $build;
}

/**
 * Generates the micro type editing form.
 */
function micro_type_form($form, &$form_state, $type = NULL) {
  if (!isset($type->mtid)) {
    // This is a new type, managed by micro module.
    $type = micro_type_set_defaults(array('module' => 'micro'));
  }
  // Make the type object available to implementations of hook_form_alter.
  $form['#micro_type'] = $type;

  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => $type->name,
    '#description' => t('The human-readable name of this micro type. This text will be displayed as part of the list on the <em>Add new micro</em> page. It is recommended that this name begin with a capital letter and contain only letters, numbers, and spaces. This name must be unique.'),
    '#required' => TRUE,
    '#size' => 30,
  );

  $form['machine_name'] = array(
    '#type' => 'machine_name',
    '#default_value' => $type->machine_name,
    '#maxlength' => 32,
    '#disabled' => !isset($type->machine_name),
    '#machine_name' => array(
      'exists' => 'micro_type_load',
    ),
    '#description' => t('A unique machine-readable name for this micro type. It must only contain lowercase letters, numbers, and underscores. This name will be used for constructing the URL of the %micro-add page, in which underscores will be converted into hyphens.', array(
      '%micro-add' => t('Add new micro'),
    )),
  );

  $form['description'] = array(
    '#title' => t('Description'),
    '#type' => 'textarea',
    '#default_value' => $type->description,
    '#description' => t('Describe this micro type. The text will be displayed on the <em>Add new micro</em> page.'),
  );

  $form['module'] = array(
    '#type' => 'value',
    '#value' => $type->module,
  );
  $form['locked'] = array(
    '#type' => 'value',
    '#value' => $type->isLocked(),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save micro type'),
    '#weight' => 40,
  );

  if ($type->module == 'micro') {
    if (!empty($type->mtid)) {
      $form['actions']['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete micro type'),
        '#weight' => 45,
      );
    }
  }

  return $form;
}

/**
 * Validates the micro type submission form generated by micro_type_form().
 */
function micro_type_form_validate($form, &$form_state) {
  $type = new stdClass();
  $type->machine_name = trim($form_state['values']['machine_name']);
  $type->name = trim($form_state['values']['name']);
  $types = micro_type_get_names();

  // 'theme' conflicts with theme_micro_form().
  // '0' is invalid, since elsewhere we check it using empty().
  if (in_array($type->machine_name, array('0', 'theme'))) {
    form_set_error('machine_name', t("Invalid machine-readable name. Enter a name other than %invalid.", array('%invalid' => $type->machine_name)));
  }

  $names = array_flip($types);

  //TODO - validate whether there is an existing name
  if (isset($names[$type->name]) && $names[$type->name] != $type->machine_name) {
    form_set_error('name', t('The human-readable name %name is already taken.', array('%name' => $type->name)));
  }

  if (isset($form_state['expiration']) && !isset($form_state['expiration_time'])) {
    form_set_error('expiration_time', t('You must specify an expiration time.'));
  }
}

/**
 * Implements hook_form_submit().
 */
function micro_type_form_submit($form, &$form_state) {
  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';
  $type = $form['#micro_type'];
  if (isset($type->mtid)) {
    $type->is_new = 0;
  }

  $type->machine_name = trim($form_state['values']['machine_name']);
  $type->name = trim($form_state['values']['name']);
  $type->description = $form_state['values']['description'];
  foreach ($form_state['values'] as $key => $value) {
    if (substr($key, 0, 5) == 'input' || substr($key, 0, 7) == 'display') {
      $format[$key] = $value;
      unset($form_state['values'][$key]);
    }
  }
  if (isset($format)) {
    variable_set('micro_format_' . $type->machine_name, $format);
  }

  foreach ($form_state['values'] as $key => $value) {
    if (substr($key, 0, 6) == 'string') {
      $strings[$key] = $value;
      unset($form_state['values'][$key]);
    }
  }
  if (isset($strings)) {
    variable_set('micro_format_strings_' . $type->machine_name, $strings);
  }

  $type->module = !empty($form_state['values']['module']) ? $form_state['values']['module'] : 'micro';
  if (isset($form['#micro_type']->module)) {
    $type->module = $form['#micro_type']->module;
  }

  if ($op == t('Delete micro type')) {
    $form_state['redirect'] = 'admin/structure/micro/manage/' . str_replace('_', '-', $type->old_type) . '/delete';
    return;
  }

  $variables = $form_state['values'];

  // Remove everything that's been saved already - whatever's left is assumed
  // to be a persistent variable.
  foreach ($variables as $key => $value) {
    if (isset($type->$key)) {
      unset($variables[$key]);
    }
  }

  unset($variables['form_token'], $variables['op'], $variables['submit'], $variables['delete'], $variables['reset'], $variables['form_id'], $variables['form_build_id']);

  // Save or reset persistent variable values.
  foreach ($variables as $key => $value) {
    $variable = $key . '_' . $type->machine_name;

    if (is_array($value)) {
      $value = array_keys(array_filter($value));
    }
    variable_set($variable, $value);
  }

  // Saving the micro type after saving the variables allows modules to act
  // on those variables via hook_micro_type_insert().
  $status = micro_type_save($type);
  micro_types_rebuild();
  menu_rebuild();
  $t_args = array('%name' => $type->name);

  if ($status == SAVED_UPDATED) {
    drupal_set_message(t('The micro type %name has been updated.', $t_args));
  }
  elseif ($status == SAVED_NEW) {
    drupal_set_message(t('The micro type %name has been added.', $t_args));
    watchdog('micro', 'Added micro type %name.', $t_args, WATCHDOG_NOTICE, l(t('view'), 'admin/structure/micro'));
  }

  $form_state['redirect'] = 'admin/structure/micro';
  return;
}

/**
 * Menu callback; delete a single micro type.
 */
function micro_type_delete_confirm($form, &$form_state, $type) {
  $form['machine_name'] = array('#type' => 'value', '#value' => $type->machine_name);
  $form['name'] = array('#type' => 'value', '#value' => $type->name);

  $message = t('Are you sure you want to delete the micro type %type?', array('%type' => $type->name));
  $caption = '';

  $num_micros = db_query("SELECT COUNT(*) FROM {micro} WHERE type = :type", array(':type' => $type->machine_name))->fetchField();
  if ($num_micros) {
    $caption .= '<p>' . format_plural($num_micros, '%type is used by 1 piece of content on your site. If you remove this micro type, you will not be able to edit the %type micro and it may not display correctly.', '%type is used by @count pieces of content on your site. If you remove %type, you will not be able to edit the %type micro and it may not display correctly.', array('%type' => $type->name)) . '</p>';
  }

  $caption .= '<p>' . t('This action cannot be undone.') . '</p>';

  return confirm_form($form, $message, 'admin/structure/micro', $caption, t('Delete'));
}

/**
 * Process micro type delete confirm submissions.
 */
function micro_type_delete_confirm_submit($form, &$form_state) {
  micro_type_delete(micro_type_get_type($form_state['values']['machine_name']));
  /*
   *drupal_goto('admin/structure/micro');
   */
  $t_args = array('%name' => $form_state['values']['name']);
  drupal_set_message(t('The micro type %name has been deleted.', $t_args));
  watchdog('menu', 'Deleted micro type %name.', $t_args, WATCHDOG_NOTICE);

  micro_types_rebuild();
  menu_rebuild();

  $form_state['redirect'] = 'admin/structure/micro';
  return;
}

/**
 * Selects just the second dropdown to be returned for re-rendering
 *
 * @return renderable array
 */
function micro_dependent_dropdown_callback($form, $form_state) {
  return array($form['bundles'], $form['format']);
}

/**
 * Helper function to populate the display options
 *
 * @param key. This will determine which set of options is returned.
 *
 * @return array of options
 */
function _micro_get_display_options($entities, $selected, $type) {
  $options = array();
  $options['none'] = 'None';
  $displays = micro_display_types();
  foreach ($displays as $key => $value) {
    if (empty($value['micro_types']) || in_array($type, $value['micro_types'])) {
      $options[$key] = $value['label'];
    }
  }
  return $options;
}

/**
 * Helper function to populate the input options
 *
 * @param key. This will determine which set of options is returned.
 *
 * @return array of options
 */
function _micro_get_input_options($entities, $selected, $type) {
  $options = array();
  $options['none'] = 'None';
  $inputs = micro_input_types();
  foreach ($inputs as $key => $value) {
    if (empty($value['micro_types']) || in_array($type, $value['micro_types'])) {
      $options[$key] = $value['label'];
    }
  }
  return $options;
}

/**
 * Resets all of the relevant fields of a module-defined micro type to their
 * default values.
 *
 * @param $type
 *   The micro type to reset. The micro type is passed back by reference with its
 *   resetted values. If there is no module-defined info for this micro type,
 *   then nothing happens.
 */
function micro_type_reset($type) {
  $info_array = module_invoke_all('micro_info');
  if (isset($info_array[$type->machine_name])) {
    $info_array[$type->machine_name]['machine_name'] = $type->machine_name;
    $info = micro_type_set_defaults($info_array[$type->machine_name]);

    foreach ($info as $field => $value) {
      $type->$field = $value;
    }
  }
}

/**
 * Returns HTML for a micro type description for the micro type admin overview page.
 *
 * @param $variables
 *   An associative array containing:
 *   - name: The human-readable name of the micro type.
 *   - type: An object containing the 'type' (machine name) and 'description' of
 *     the micro type.
 *
 * @ingroup themeable
 */
function theme_micro_admin_overview($variables) {
  $name = $variables['name'];
  $type = $variables['machine_name'];
  $output = check_plain($name);
  $output .= ' <small> (Machine name: ' . check_plain($type->machine_name) . ')</small>';
  $output .= '<div class="description">' . filter_xss_admin($type->description) . '</div>';
  return $output;
}

/**
 * Settings form elements for entityreference fields.
 */
function micro_admin_field_micro_settings_form($field, $instance) {
  $field_types = array(
    'entityreference',
    'datestamp',
    'text',
  );
  if (!in_array($field['type'], $field_types)) {
    return array();
  }
  
  $micro_type = $instance['bundle'];
  $bundle_info = field_info_bundles('micro');
  $bundle_info = $bundle_info[$instance['bundle']];
  $form = array(
    '#type' => 'fieldset',
    '#title' => 'Micro',
    '#collapsible' => FALSE,
    '#tree' => TRUE,
  );
  
  if ($field['type'] == 'entityreference' && $field['settings']['target_type'] == 'user') {
    $form['is_author'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use as author field. This will override any default value settings above.'),
      '#default_value' => empty($instance['micro']['is_author']) ? 0 : $instance['micro']['is_author'],
    );
  }

  if ($field['type'] == 'datestamp') {
    $form['is_created'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use as created date field. This will override any default value and date format settings above.'),
      '#default_value' => empty($instance['micro']['is_created']) ? 0 : $instance['micro']['is_created'],
    );
  }

  if ($field['type'] == 'text') {
    $form['is_title'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use as title in micro page display and default listings.'),
      '#default_value' => empty($instance['micro']['is_title']) ? 0 : $instance['micro']['is_title'],
    );
  }
  
  if ($field['type'] == 'entityreference') {
    $form['label'] = array(
      '#type' => 'textfield',
      '#size' => 16,
      '#title' => 'Label',
      '#default_value' => !isset($instance['micro']['label']) ? $bundle_info['label'] : $instance['micro']['label'],
      '#description' => t('The label to be used for page tabs, links, or block titles. Usually the plural of the micro type label.'),
    );
    $form['page'] = array(
      'display' => array(
        '#type' => 'select',
        '#title' => 'Generate a page display',
        '#options' => array(
          0 => t('No page display'),
          'default' => t('Default page display'), // TODO: add any views with a page display that takes this field as an argument.
        ),
        '#default_value' => !isset($instance['micro']['page']['display']) ? 0 : $instance['micro']['page']['display'],
      ),
      'display_tab' => array(
        '#type' => 'checkbox',
        '#title' => 'Display page as tab',
        '#default_value' => !isset($instance['micro']['page']['display_tab']) ? 0 : $instance['micro']['page']['display_tab'],
      ),
      'display_field_link' => array(
        '#type' => 'checkbox',
        '#title' => 'Display as link to page as a field',
        '#default_value' => !isset($instance['micro']['page']['display_field_link']) ? 0 : $instance['micro']['page']['display_field_link'],
      ),
    );

    $form['block'] = array(
      'display' => array(
        '#type' => 'select',
        '#title' => 'Generate a block display',
        '#options' => array(
          0 => t('No page display'),
          'default' => t('Default block display'), // TODO: add any views with a block display that takes this field as an argument.
        ),
        '#default_value' => !isset($instance['micro']['block']['display']) ? 0 : $instance['micro']['block']['display'],
      ),
      'display_field' => array(
        '#type' => 'checkbox',
        '#title' => 'Display block as field',
        '#default_value' => !isset($instance['micro']['block']['display_field']) ? 0 : $instance['micro']['block']['display_field'],
      ),
    );
  }

  return $form;
}

/**
 * Menu callback: micro item administration.
 */
function micro_admin($form, $form_state) {
  if (isset($form_state['values']['operation']) && $form_state['values']['operation'] == 'delete') {
    return micro_multiple_delete_confirm($form, $form_state, array_filter($form_state['values']['micros']));
  }
  $form['filter'] = micro_filter_form();
  $form['#submit'][] = 'micro_filter_form_submit';
  $form['admin'] = micro_admin_micros();

  return $form;
}

/**
 * Return form for micro administration filters.
 */
function micro_filter_form() {
  $session = isset($_SESSION['micro_overview_filter']) ? $_SESSION['micro_overview_filter'] : array();
  $filters = micro_filters();

  $i = 0;
  $form['filters'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Show only items where'), 
    '#theme' => 'exposed_filters__micro',
  );
  foreach ($session as $filter) {
    list($type, $value) = $filter;
    $value = $filters[$type]['options'][$value];
    $t_args = array(
      '%property' => $filters[$type]['title'],
      '%value' => $value,
    );
    if ($i++) {
      $form['filters']['current'][] = array('#markup' => t('and where %property is %value', $t_args));
    }
    else {
      $form['filters']['current'][] = array('#markup' => t('where %property is %value', $t_args));
    }
    if (in_array($type, array('type'))) {
      // Remove the option if it is already being filtered on.
      unset($filters[$type]);
    }
  }

  $form['filters']['status'] = array(
    '#type' => 'container', 
    '#attributes' => array('class' => array('clearfix')), 
    '#prefix' => ($i ? '<div class="additional-filters">' . t('and where') . '</div>' : ''),
  );
  $form['filters']['status']['filters'] = array(
    '#type' => 'container', 
    '#attributes' => array('class' => array('filters')),
  );
  foreach ($filters as $key => $filter) {
    $form['filters']['status']['filters'][$key] = array(
      '#type' => 'select', 
      '#options' => $filter['options'], 
      '#title' => $filter['title'], 
      '#default_value' => '[any]',
    );
  }

  $form['filters']['status']['actions'] = array(
    '#type' => 'actions', 
    '#attributes' => array('class' => array('container-inline')),
  );
  $form['filters']['status']['actions']['submit'] = array(
    '#type' => 'submit', 
    '#value' => count($session) ? t('Refine') : t('Filter'),
  );
  if (count($session)) {
    $form['filters']['status']['actions']['undo'] = array(
      '#type' => 'submit',
      '#value' => t('Undo'),
    );
    $form['filters']['status']['actions']['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset'),
    );
  }

  drupal_add_js('misc/form.js');

  return $form;
}

/**
 * List micro administration filters that can be applied.
 */
function micro_filters() {
  $filters['type'] = array(
    'title' => t('type'), 
    'options' => array(
      '[any]' => t('any'),
    ) + micro_type_get_names(),
  );

  return $filters;
}

/**
 * Process result from micro administration filter form.
 */
function micro_filter_form_submit($form, &$form_state) {
  $filters = micro_filters();
  switch ($form_state['values']['op']) {
    case t('Filter'):
    case t('Refine'):
      // Apply every filter that has a choice selected other than 'any'.
      foreach ($filters as $filter => $options) {
        if (isset($form_state['values'][$filter]) && $form_state['values'][$filter] != '[any]') {
          // Flatten the options array to accommodate hierarchical/nested options.
          $flat_options = form_options_flatten($filters[$filter]['options']);
          // Only accept valid selections offered on the dropdown, block bad input.
          if (isset($flat_options[$form_state['values'][$filter]])) {
            $_SESSION['micro_overview_filter'][] = array($filter, $form_state['values'][$filter]);
          }
        }
      }
      break;
    case t('Undo'):
      array_pop($_SESSION['micro_overview_filter']);
      break;
    case t('Reset'):
      $_SESSION['micro_overview_filter'] = array();
      break;
  }
}

/**
 * Form builder: Builds the micro administration overview.
 */
function micro_admin_micros() {
  $admin_access = user_access('administer micro items');

  // Build the 'Update options' form.
  $form['options'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Update options'), 
    '#attributes' => array('class' => array('container-inline')), 
    '#access' => $admin_access,
  );
  $options = array();
  foreach (module_invoke_all('micro_operations') as $operation => $array) {
    $options[$operation] = $array['label'];
  }
  $form['options']['operation'] = array(
    '#type' => 'select', 
    '#title' => t('Operation'), 
    '#title_display' => 'invisible', 
    '#options' => $options, 
    '#default_value' => 'approve',
  );
  $form['options']['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Update'), 
    '#validate' => array('micro_admin_micros_validate'), 
    '#submit' => array('micro_admin_micros_submit'),
  );

  // Build the sortable table header.
  $header = array(
    'mid' => array(
      'data' => t('ID'),
      'field' => 'm.mid',
      'sort' => 'DESC',
    ),
    'type' => array(
      'data' => t('Type'),
      'field' => 'm.type',
    ),
  );
  $header['operations'] = array('data' => t('Operations'));

  $query = db_select('micro', 'm')->extend('PagerDefault')->extend('TableSort');
  micro_build_filter_query($query);

  $mids = $query
    ->fields('m', array('mid'))
    ->limit(50)
    ->orderByHeader($header)
    ->execute()
    ->fetchCol();
  $micros = micro_load_multiple($mids);

  // Prepare the list of micros.
  $destination = drupal_get_destination();
  $options = array();
  foreach ($micros as $micro) {
    $options[$micro->mid] = array(
      'mid' => array(
        'data' => array(
          '#type' => 'link', 
          '#title' => micro_label($micro),
          '#href' => 'micro/' . $micro->mid, 
        ),
      ), 
      'type' => check_plain(micro_type_get_name($micro)), 
    );
    // Build a list of all the accessible operations for the current micro.
    $operations = array();
    if (micro_access('update', $micro)) {
      $operations['edit'] = array(
        'title' => t('edit'), 
        'href' => 'micro/' . $micro->mid . '/edit', 
        'query' => $destination,
      );
    }
    if (micro_access('delete', $micro)) {
      $operations['delete'] = array(
        'title' => t('delete'), 
        'href' => 'micro/' . $micro->mid . '/delete', 
        'query' => $destination,
      );
    }
    $options[$micro->mid]['operations'] = array();
    if (count($operations) > 1) {
      // Render an unordered list of operations links.
      $options[$micro->mid]['operations'] = array(
        'data' => array(
          '#theme' => 'links__micro_operations', 
          '#links' => $operations, 
          '#attributes' => array('class' => array('links', 'inline')),
        ),
      );
    }
    elseif (!empty($operations)) {
      // Render the first and only operation as a link.
      $link = reset($operations);
      $options[$micro->mid]['operations'] = array(
        'data' => array(
          '#type' => 'link', 
          '#title' => $link['title'], 
          '#href' => $link['href'], 
          '#options' => array('query' => $link['query']),
        ),
      );
    }
  }

  // Only use a tableselect when the current user is able to perform any
  // operations.
  if ($admin_access) {
    $form['micros'] = array(
      '#type' => 'tableselect', 
      '#header' => $header, 
      '#options' => $options, 
      '#empty' => t('No content available.'),
    );
  }
  // Otherwise, use a simple table.
  else {
    $form['micro'] = array(
      '#theme' => 'table', 
      '#header' => $header, 
      '#rows' => $options, 
      '#empty' => t('No content available.'),
    );
  }

  $form['pager'] = array('#markup' => theme('pager'));
  return $form;
}

/**
 * Apply filters for micro administration filters based on session.
 * 
 * @param $query
 *   A SelectQuery to which the filters should be applied.
 */
function micro_build_filter_query(SelectQueryInterface $query) {
  // Build query
  $filter_data = isset($_SESSION['micro_overview_filter']) ? $_SESSION['micro_overview_filter'] : array();
  foreach ($filter_data as $index => $filter) {
    list($key, $value) = $filter;
    switch ($key) {
      case 'type':
        $query->condition('m.' . $key, $value);
        break;
    }
  }
}

/**
 * Validate micro_admin_micros form submissions.
 *
 * Check if any micro have been selected to perform the chosen
 * 'Update option' on.
 */
function micro_admin_micros_validate($form, &$form_state) {
  // Error if there are no items to select.
  if (!is_array($form_state['values']['micros']) || !count(array_filter($form_state['values']['micros']))) {
    form_set_error('', t('No items selected.'));
  }
}

/**
 * Process micro_admin_micro form submissions.
 *
 * Execute the chosen 'Update option' on the selected micros.
 */
function micro_admin_micros_submit($form, &$form_state) {
  $operations = module_invoke_all('micro_operations');
  $operation = $operations[$form_state['values']['operation']];
  // Filter out unchecked micros
  $micros = array_filter($form_state['values']['micros']);
  if ($function = $operation['callback']) {
    // Add in callback arguments if present.
    if (isset($operation['callback arguments'])) {
      $args = array_merge(array($micros), $operation['callback arguments']);
    }
    else {
      $args = array($micros);
    }
    call_user_func_array($function, $args);

    cache_clear_all();
  }
  else {
    // We need to rebuild the form to go to a second step. For example, to
    // show the confirmation form for the deletion of micros.
    $form_state['rebuild'] = TRUE;
  }
}

function micro_multiple_delete_confirm($form, &$form_state, $micros) {
  $form['micros'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);
  // array_filter returns only elements with TRUE values
  foreach ($micros as $mid => $value) {
    $title = db_query('SELECT mid FROM {micro} WHERE mid = :mid', array(':mid' => $mid))->fetchField();
    $form['micros'][$mid] = array(
      '#type' => 'hidden',
      '#value' => $mid,
      '#prefix' => '<li>',
      '#suffix' => $mid . "</li>\n",
    );
  }
  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');
  $form['#submit'][] = 'micro_multiple_delete_confirm_submit';
  $confirm_question = format_plural(count($micros),
                                  'Are you sure you want to delete this item?',
                                  'Are you sure you want to delete these items?');
  return confirm_form($form,
                    $confirm_question,
                    'admin/content', t('This action cannot be undone.'),
                    t('Delete'), t('Cancel'));
}

function micro_multiple_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    micro_delete_multiple(array_keys($form_state['values']['micros']));
    $count = count($form_state['values']['micros']);
    watchdog('content', 'Deleted @count micros.', array('@count' => $count));
    drupal_set_message(format_plural($count, 'Deleted 1 micro.', 'Deleted @count micros.'));
  }
  $form_state['redirect'] = 'admin/content/micro';
}
